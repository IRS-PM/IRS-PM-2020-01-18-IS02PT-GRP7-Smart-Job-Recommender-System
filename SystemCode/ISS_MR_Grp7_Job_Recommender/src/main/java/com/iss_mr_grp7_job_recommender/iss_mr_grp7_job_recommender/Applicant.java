package com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender;

/**
 * This class was automatically generated by the data modeler tool.
 */

import java.util.List;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.io.BufferedReader;
import java.io.IOException;
import java.net.URL;
import java.util.Arrays;

@org.kie.api.definition.type.Label("Applicant Info")
public class Applicant implements java.io.Serializable {

	static final long serialVersionUID = 1L;

	@org.kie.api.definition.type.Label("Field of Study")
	private java.lang.String field;
	@org.kie.api.definition.type.Label("Error and Cause")
	private com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender.ValidationErrorDO error;
	@org.kie.api.definition.type.Label("Highest Education Attained")
	private java.lang.String highestEducation;

	@org.kie.api.definition.type.Label("Total Work Experience")
	private java.lang.Integer workExp;

	@org.kie.api.definition.type.Label("Zip Code")
	private java.lang.Integer zipCode;

	@org.kie.api.definition.type.Label("Preferred Job Scope")
	private java.lang.String prefScope;
	@org.kie.api.definition.type.Label("Job Posting Collection")
	private com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender.JobListCollection jobListCollection;
	@org.kie.api.definition.type.Label("Expected Salary")
	private String expectedSalary;

	@org.kie.api.definition.type.Label("Preferred Type of Employment")
	private java.lang.String employmentTypePref;

	@org.kie.api.definition.type.Label("Your Technical Skills")
	private java.lang.String technicalSkills;

	@org.kie.api.definition.type.Label("Preferred Job Seniority Level")
	private java.lang.String seniorityLevelPref;

	@org.kie.api.definition.type.Label("Your Mode of Travel")
	private java.lang.String modeOfTravel;

	@org.kie.api.definition.type.Label("Your Travel Duration Tolerance")
	private Integer travelDurationTolerance;

	@org.kie.api.definition.type.Label(value = "Recommended Skills to Learn")
	private java.lang.String skillsToLearn;

	public Applicant() {
	}

	public java.lang.String getField() {
		return this.field;
	}

	public void setField(java.lang.String field) {
		this.field = field;
	}

	public com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender.ValidationErrorDO getError() {
		return this.error;
	}

	public void setError(
			com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender.ValidationErrorDO error) {
		this.error = error;
	}

	public java.lang.String getHighestEducation() {
		return this.highestEducation;
	}

	public void setHighestEducation(java.lang.String highestEducation) {
		this.highestEducation = highestEducation;
	}

	public java.lang.Integer getWorkExp() {
		return this.workExp;
	}

	public void setWorkExp(java.lang.Integer workExp) {
		this.workExp = workExp;
	}

	public java.lang.Integer getZipCode() {
		return this.zipCode;
	}

	public void setZipCode(java.lang.Integer zipCode) {
		this.zipCode = zipCode;
	}

	public java.lang.String getPrefScope() {
		return this.prefScope;
	}

	public void setPrefScope(java.lang.String prefScope) {
		this.prefScope = prefScope;
	}

	public com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender.JobListCollection getJobListCollection() {
		return this.jobListCollection;
	}

	public void setJobListCollection(
			com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender.JobListCollection jobListCollection) {
		this.jobListCollection = jobListCollection;
	}

	public java.lang.String getEmploymentTypePref() {
		return this.employmentTypePref;
	}

	public void setEmploymentTypePref(java.lang.String employmentTypePref) {
		this.employmentTypePref = employmentTypePref;
	}

	public java.lang.String getTechnicalSkills() {
		return this.technicalSkills;
	}

	public void setTechnicalSkills(java.lang.String technicalSkills) {
		this.technicalSkills = technicalSkills;
	}

	public java.lang.String getSeniorityLevelPref() {
		return this.seniorityLevelPref;
	}

	public void setSeniorityLevelPref(java.lang.String seniorityLevelPref) {
		this.seniorityLevelPref = seniorityLevelPref;
	}

	public java.lang.String getModeOfTravel() {
		return this.modeOfTravel;
	}

	public void setModeOfTravel(java.lang.String modeOfTravel) {
		this.modeOfTravel = modeOfTravel;
	}

	public void populateJobListCollection() {
		jobListCollection = new JobListCollection();

		// Get input data from Applicant for brute force search comparison
		String applicantEmploymentTypePref = this.getEmploymentTypePref();
		String applicantHighestEducation = this.getHighestEducation().toLowerCase();
		String applicantEducationField = this.getField().toLowerCase();
		int applicantWorkExp = this.getWorkExp();

		if (applicantEmploymentTypePref.equals("No Preference")) {
			applicantEmploymentTypePref = "Contract Permanent";
		}

		// Load Jobs from CSV
		// CSV file to be placed in /home/iss-user/Desktop/Miscellaneous folder directory

		Path pathToFile = Paths.get("/home/iss-user/Desktop/Miscellaneous/JobDatas.csv");
		try (BufferedReader br = Files.newBufferedReader(pathToFile,
				StandardCharsets.US_ASCII))

		{
			String line = br.readLine();
			line = br.readLine();
			while (line != null) {

				String[] attributes = line.split(",", -1);

				// Pull job data variables from attributes and assign
				String employmentType = attributes[1];
				int workExperienceReq = Integer.parseInt(attributes[5]);
				String jobQualifications = attributes[13];

				if ((employmentType.contains(applicantEmploymentTypePref))
						& (workExperienceReq <= applicantWorkExp)
						& (jobQualifications.contains(applicantHighestEducation))
						& (jobQualifications.contains(applicantEducationField))) {

					jobListCollection.populateJobPostings(attributes);

				}

				line = br.readLine();
			}
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

	}

	public void populateJobTravelDuration(Boolean offlineMode) {
		Integer applicantZipCode = this.getZipCode();
		String applicantModeOfTravel = this.getModeOfTravel();

		switch (applicantModeOfTravel) {
			case "Drive" :
				applicantModeOfTravel = "driving";
				break;
			case "Public Transport" :
				applicantModeOfTravel = "transit";
				break;
		}

		List<JobPosting> jobList = this.getJobListCollection().getJobList();

		System.out.println("Mode of travel: " + applicantModeOfTravel);
		System.out.println("Calculating travel duration required for job list...");
		
		if(offlineMode == false) {
    		for (JobPosting job : jobList) {
			    job.calculateTravelDuration(applicantZipCode, applicantModeOfTravel);
		    }
		} else {
       		for (JobPosting job : jobList) {
			    job.calculateTravelDurationOffline(applicantZipCode, applicantModeOfTravel);
		    } 
		}


	}
	
	public int convertSalaryStrToInt(String salaryRange) {
	    
	    int salaryRangeInt = 0;
	    
	    switch(salaryRange) {
	        case "Low" :
	            salaryRangeInt = 0;
	            break;
            case "Med" :
                salaryRangeInt = 1;
                break;
            case "High" :
                salaryRangeInt = 2;
                break;
	    }
	    
	    return salaryRangeInt;
	    
	}
	
	public Float scoreTechnicalSkillsRequirements(String applicantSkills, String jobSkills) {
	    String[] jobSkillsList = jobSkills.split("%");
		jobSkillsList = Arrays.stream(jobSkillsList)
        .filter(value ->
                value != null && value.length() > 0
        )
        .toArray(size -> new String[size]);
	    
	    int totalSkills = jobSkillsList.length;
	    int skillsMet = 0;
	    
	    for(String skill : jobSkillsList) {
	        
	        // Handle empty column entries
	        if(skill.contentEquals("")) {
	            skillsMet = 1;
	            totalSkills = 1;
	            break;
	        } 
	        
	        else if(applicantSkills.contains(skill)) {
	            skillsMet += 1;
	        }
	    }
	    
	    Float skillsMetScore = ( (skillsMet) / (float) totalSkills );
	    
	    return skillsMetScore;
	}

	public void calculateJobSuitabilityScore() {
		String applicantPrefJobScope = this.getPrefScope();
		String applicantPrefSeniorityLevel = this.getSeniorityLevelPref();
		String applicantExpectedSalary = this.getExpectedSalary();
		int applicantExpectedSalaryInt = this.convertSalaryStrToInt(applicantExpectedSalary);
		String applicantTechnicalSkills = this.getTechnicalSkills().toLowerCase();
		Integer applicantTravelTimePref = this.getTravelDurationTolerance();

		List<JobPosting> jobList = this.getJobListCollection().getJobList();

		Float jobSuitabilityScore = 0.0f;
		

		for (JobPosting job : jobList) {
			String jobScope = job.getJobCategory();
			String jobSeniorityLevel = job.getSeniorityLevel();
			String jobSalaryRange = job.getSalaryRange();
			int jobSalaryRangeInt = this.convertSalaryStrToInt(jobSalaryRange);
			String jobTravelTime = job.getTravelTimeReq();
			String jobTechnicalSkills = job.getJobTechnicalSkills();
			
			// Calculate score for number of skill requirements met
			Float technicalSkillsScore = scoreTechnicalSkillsRequirements(applicantTechnicalSkills, jobTechnicalSkills);

			if (applicantPrefJobScope.contains(jobScope)) {
				jobSuitabilityScore += 1;
			}

			if (applicantPrefSeniorityLevel.contains(jobSeniorityLevel)) {
				jobSuitabilityScore += 1;
			}

			if (applicantExpectedSalaryInt <= jobSalaryRangeInt) {
				jobSuitabilityScore += 1;
			}

			if (!jobTravelTime.contentEquals("Unable to calculate travel time")) {
				int duration = Integer.parseInt(jobTravelTime);
				Float timeTravelDiffScore = 1 - ((duration - applicantTravelTimePref) / (float) applicantTravelTimePref);
				jobSuitabilityScore += timeTravelDiffScore;
			} 
			
			if (technicalSkillsScore >= 0.7f) {
			    jobSuitabilityScore += 2;
			}
			
			else if (technicalSkillsScore < 0.7f && technicalSkillsScore >= 0.3f) {
			    jobSuitabilityScore += 1;
			} else {
			    jobSuitabilityScore += 0;
			    
			}

			jobSuitabilityScore = Math.round(jobSuitabilityScore * 10) / 10.0f;
			job.setJobMatchScore(jobSuitabilityScore);

			jobSuitabilityScore = 0.0f;
		}

	}

	public java.lang.Integer getTravelDurationTolerance() {
		return this.travelDurationTolerance;
	}

	public void setTravelDurationTolerance(
			java.lang.Integer travelDurationTolerance) {
		this.travelDurationTolerance = travelDurationTolerance;
	}

	public void calcExpectedSalaryML() {
		int workExp = this.getWorkExp();
		String highestEdu = this.getHighestEducation();
		String jobScopePref = this.getPrefScope();
		String seniorityLevelPref = this.getSeniorityLevelPref();
		String expectedSalaryRange = "";

		if (workExp <= 3.5) {
			if (!technicalSkills.contains("java")
					& !technicalSkills.contains("scala")) {
				if (highestEdu != "PhD") {
					if (jobScopePref != "Sciences") {
						if (seniorityLevelPref != "Non-executive") {
							expectedSalaryRange = "Med";
						} else {
							expectedSalaryRange = "Low";
						}
					} else {
						if (jobScopePref != "Information Technology") {
							expectedSalaryRange = "Low";
						} else {
							expectedSalaryRange = "High";
						}
					}
				} else {
					if (workExp <= 1.5) {
						if (jobScopePref != "Science"
								& jobScopePref != "Engineering") {
							expectedSalaryRange = "Med";
						} else {
							expectedSalaryRange = "High";
						}
					} else {
						if (!technicalSkills.contains("version")) {
							expectedSalaryRange = "High";
						} else {
							expectedSalaryRange = "Med";
						}
					}
				}
			} else {
				expectedSalaryRange = "High";
			}
		} else {
			if (!technicalSkills.contains("python")
					& !technicalSkills.contains("java")) {
				if (!technicalSkills.contains("algorithms")) {
					if (seniorityLevelPref != "Junior Executive") {
						if (highestEdu != "Master") {
							expectedSalaryRange = "High";
						} else {
							expectedSalaryRange = "Low";
						}
					} else {
						if (!technicalSkills.contains("machine learning")) {
							expectedSalaryRange = "High";
						} else {
							expectedSalaryRange = "Med";
						}
					}
				} else {
					if (!technicalSkills.contains("one")) {
						expectedSalaryRange = "Med";
					} else {
						expectedSalaryRange = "High";
					}
				}
			} else {
				if (!technicalSkills.contains("scala")) {
					expectedSalaryRange = "Med";
				} else {
					expectedSalaryRange = "High";
				}
			}
		}

		this.setExpectedSalary(expectedSalaryRange);
	}
	
	public void populateRecommendedSkillsToLearn() {
	    String applicantSkills = this.getTechnicalSkills();
	    applicantSkills = applicantSkills.toLowerCase();
	    
		String[] skills_list = { "python","java","scala","hadoop","sql","spark","tensor",
		"scikit","linux","pytorch","theano","caffe","Matlab","perl","deep","nlp",
		"apache","mapreduce","aws","azure","container","kafka","cassandra","julia",
		"jupyter","nltk","tableau","power bi","sas","pandas","git","hive","impala",
		"agile","machine","bash","natural language","oracle","cloud","flask",
		"golang","optimization","c#","opencv","vision","api","jira"};
		
		String recommendedSkills = "";
		
		for(String skill : skills_list) {
			if (!applicantSkills.contains(skill)) {
				recommendedSkills += skill + ", ";
			}
		}
		
		this.setSkillsToLearn(recommendedSkills);
	    
	}

	public java.lang.String getExpectedSalary() {
		return this.expectedSalary;
	}

	public void setExpectedSalary(java.lang.String expectedSalary) {
		this.expectedSalary = expectedSalary;
	}

	public java.lang.String getSkillsToLearn() {
		return this.skillsToLearn;
	}

	public void setSkillsToLearn(java.lang.String skillsToLearn) {
		this.skillsToLearn = skillsToLearn;
	}

	public Applicant(
			java.lang.String field,
			com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender.ValidationErrorDO error,
			java.lang.String highestEducation,
			java.lang.Integer workExp,
			java.lang.Integer zipCode,
			java.lang.String prefScope,
			com.iss_mr_grp7_job_recommender.iss_mr_grp7_job_recommender.JobListCollection jobListCollection,
			java.lang.String expectedSalary,
			java.lang.String employmentTypePref,
			java.lang.String technicalSkills,
			java.lang.String seniorityLevelPref, java.lang.String modeOfTravel,
			java.lang.Integer travelDurationTolerance,
			java.lang.String skillsToLearn) {
		this.field = field;
		this.error = error;
		this.highestEducation = highestEducation;
		this.workExp = workExp;
		this.zipCode = zipCode;
		this.prefScope = prefScope;
		this.jobListCollection = jobListCollection;
		this.expectedSalary = expectedSalary;
		this.employmentTypePref = employmentTypePref;
		this.technicalSkills = technicalSkills;
		this.seniorityLevelPref = seniorityLevelPref;
		this.modeOfTravel = modeOfTravel;
		this.travelDurationTolerance = travelDurationTolerance;
		this.skillsToLearn = skillsToLearn;
	}

}